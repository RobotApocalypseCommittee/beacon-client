trigger:
- master

strategy:
  matrix:
    mac:
      imageName: 'macos-latest'
    windows:
      imageName: 'windows-latest'

pool:
  vmImage: $(imageName)

variables:
  - name: "buildConfiguration"
    value: "Release"
  - group: Main

steps:
- task: NuGetToolInstaller@1
  displayName: "Install NuGet"

- task: NuGetCommand@2
  inputs:
    restoreSolution: '**/*.sln'
  displayName: "NuGet: Restore Solution"

# Android
- task: XamarinAndroid@1
  inputs:
    projectFile: 'BeaconClient/BeaconClient.Android/BeaconClient.Android.csproj'
    outputDirectory: '$(Build.ArtifactStagingDirectory)'
    configuration: '$(buildConfiguration)'
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: "Android Build"
- task: AndroidSigning@3
  inputs:
    apkFiles: '$(Build.ArtifactStagingDirectory)/*.apk'
    apksignerKeystoreFile: 'RAC.jks'
    apksignerKeystorePassword: '$(AndroidKeystorePassword)'
    apksignerKeystoreAlias: '$(AndroidKeyAlias)'
    apksignerKeyPassword: '$(AndroidKeyPassword)'
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: "Sign Android APK"

# iOS
- task: InstallAppleCertificate@2
  inputs:
    certSecureFile: 'RACDev.p12'
    certPwd: '$(P12password)'
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: "Install iOS Signing Certificate"
- task: InstallAppleProvisioningProfile@1
  inputs:
    provProfileSecureFile: 'BeaconClient11Apr2019.mobileprovision' # I seriously blanked on the year
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: "Install iOS Provisioning Profile"
- task: XamariniOS@2
  inputs:
    solutionFile: 'BeaconClient/BeaconClient.iOS/BeaconClient.iOS.csproj'
    configuration: '$(buildConfiguration)'
    packageApp: true
    buildForSimulator: false
    signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
    signingProvisioningProfileID: '$(APPLE_PROV_PROFILE_UUID)'
    args: /p:IpaPackageDir="$(Build.ArtifactStagingDirectory)"
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: "iOS Build"

- task: MSBuild@1
  inputs:
    solution: '**/*Mac.csproj'
    msbuildArchitecture: 'x64'
    platform: 'AnyCPU'
    configuration: '$(buildConfiguration)'
    msbuildArguments: '/p:OutputPath="$(Build.ArtifactStagingDirectory)/"'
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: "Mac Build"

- task: MSBuild@1
  inputs:
    solution: '**/*Windows.csproj'
    msbuildArchitecture: 'x64'
    platform: 'AnyCPU'
    configuration: '$(buildConfiguration)'
    msbuildArguments: '/p:OutputPath="$(Build.ArtifactStagingDirectory)"'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: "Windows Build"

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/com.bekos.BeaconClient.apk'
    ArtifactName: 'Android'
    publishLocation: 'Container'
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: "Publish Android"

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/iOSBeaconClient.ipa'
    ArtifactName: 'iOS'
    publishLocation: 'Container'
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: "Publish iOS"

- bash: |
    cd "$(Build.ArtifactStagingDirectory)"
    mkdir macdist
    mv "$(Build.ArtifactStagingDirectory)/BeaconClient.Mac.app" "$(Build.ArtifactStagingDirectory)/macdist"
    ln -s /Applications "$(Build.ArtifactStagingDirectory)/macdist"
    hdiutil create -volname "Beacon Client for Mac" -srcfolder "$(Build.ArtifactStagingDirectory)/macdist" -ov -format UDZO "$(Build.ArtifactStagingDirectory)/BeaconClientMac.dmg"
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: "Package App Mac"
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/BeaconClientMac.dmg'
    ArtifactName: 'Mac'
    publishLocation: 'Container'
  condition: eq( variables['Agent.OS'], 'Darwin' )
  displayName: "Publish Mac"

- powershell: |
    mkdir "$(Build.ArtifactStagingDirectory)/windist"
    Move-Item "$(Build.ArtifactStagingDirectory)/BeaconClient.Windows.exe" "$(Build.ArtifactStagingDirectory)/windist"
    if ("$(buildConfiguration)" -eq "Debug") {Move-Item "$(Build.ArtifactStagingDirectory)/BeaconClient.Windows.pdb" "$(Build.ArtifactStagingDirectory)/windist";}
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: "Package App Windows"
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/windist'
    ArtifactName: 'Windows'
    publishLocation: 'Container'
  condition: eq( variables['Agent.OS'], 'Windows_NT' )
  displayName: "Publish Windows"
